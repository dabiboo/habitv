<?php
// $Id: nodeaccess.module,v 1.4.2.7.2.8 2007/06/08 16:24:51 debtman7 Exp $

/**
 * Implementation of hook_help().
 */
function nodeaccess_help($section) {
  if (preg_match('|^node/\d+/grant|', $section)) {
    $message = t('You can set grants per users.');
    $message .= t(' You need to check the Keep checkbox if you want to keep the user for granting. Users with Keep checkbox checked remain in the user table between searches. Note that user rights are additional to those coming from roles.');
  }
}


/**
 * Implementation of hook_menu().
 */
function nodeaccess_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'admin/user/nodeaccess', 'title' => t('Nodeaccess'),
      'callback' => 'nodeaccess_admin', 'access' => user_access('administer nodeaccess'),
      'description' => t('Change default settings for the nodeaccess module'));
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      $types = variable_get('nodeaccess-types', array());
      global $user;
      if ($node->nid && $types[$node->type] && (user_access('grant node permissions') || (user_access('grant own node permissions') && $node->uid == $user->uid))) {
        $items[] = array('path' => 'node/'. $node->nid .'/grant', 'title' => t('Grant'),
          'callback' => 'nodeaccess_page', 'callback arguments' => $node->nid,
          'access' => nodeaccess_access('grant', $node),
          'weight' => 5,
          'type' => MENU_LOCAL_TASK);
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function nodeaccess_perm() {
  return array('administer nodeaccess', 'grant node permissions', 'grant own node permissions');
}

/**
 * Implementation of hook_access().
 */
function nodeaccess_access($op, $node) {
  global $user;

  if ($op == 'grant') {
    if (user_access('grant node permissions') || (user_access('grant own node permissions') && ($user->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Menu callback. Draws the page.
 */
function nodeaccess_page($nid) {
  $output = drupal_get_form('nodeaccess_grants_form', $nid);
 
  $node = node_load($nid); 
  drupal_set_title(check_plain($node->title));
  return $output;
}

function nodeaccess_grants_form($nid) {
    $node = node_load($nid);

  // build our form
  $edit = _nodeaccess_populate($nid);

  $roles = $edit['rid'];
  $users = $edit['uid'];

  $form['nid'] = array('#type' => 'value', '#value' => $nid);
	
  // roles table
  if (is_array($roles)) {
    $form['rid'] = array('#tree' => TRUE);
    $allowed = variable_get('nodeaccess-roles', array());
    foreach ($roles as $key => $field) {
    if ($allowed[$key]) {
      $form['rid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name']);
      $form['rid'][$key]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $field['grant_view']);
      $form['rid'][$key]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $field['grant_update']);
      $form['rid'][$key]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $field['grant_delete']);
      }
    }
  }

  // users table
  if (is_array($users)) {
    $form['uid'] = array('#tree' => TRUE);
    foreach ($users as $key => $field) {
      $form['uid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name']);
      $form['uid'][$key]['keep'] = array('#type' => 'checkbox', '#default_value' => $field['keep']);
      $form['uid'][$key]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $field['grant_view']);
      $form['uid'][$key]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $field['grant_update']);
      $form['uid'][$key]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $field['grant_delete']);
    }
  }

  // deal with searching
  $form['old_keys'] = array('#type' => 'hidden', '#value' => $edit['keys']);
  
  // autocomplete returns errors if users don't have access to profiles
  if (user_access('access user profiles')) {
    $form['keys'] = array('#type' => 'textfield', '#default_value' => $edit['keys'], '#size' => 40, '#autocomplete_path' => 'user/autocomplete');
  } 
  else {
    $form['keys'] = array('#type' => 'textfield', '#default_value' => $edit['keys'], '#size' => 40);
  }
  
  $form['search'] = array('#type' => 'button', '#value' => t('Search'));

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Grants'));

  return $form;
}

function theme_nodeaccess_grants_form($form) {
  // role table
  $roles = element_children($form['rid']);
  if (count($roles) > 0) {
    $header = array(t('Role'), t('View'), t('Edit'), t('Delete'));
    foreach ($roles as $key) {
      $row = array();
      $row[] = $form['rid'][$key]['name']['#value'] . drupal_render($form['rid'][$key]['name']);
      $row[] = drupal_render($form['rid'][$key]['grant_view']);
      $row[] = drupal_render($form['rid'][$key]['grant_update']);
      $row[] = drupal_render($form['rid'][$key]['grant_delete']);
      $rows[] = $row;
    }
    $output .= theme('table', $header, $rows);
  }

  // search form
  $output .= '<p /><div class="search-form">';
  $output .= '<b>' . t('Enter names to search for users:') . '</b>';
  $output .= '<div class="container-inline">';
  $output .= drupal_render($form['old_keys']);
  $output .= drupal_render($form['keys']);
  $output .= drupal_render($form['search']);
  $output .= '</div></div>';

  // user table
  unset($rows);
  $users = element_children($form['uid']);
  if (count($users) > 0) {
    $header = array(t('User'), t('Keep?'), t('View'), t('Edit'), t('Delete'));
    foreach ($users as $key) {
      $row = array();
      $row[] = $form['uid'][$key]['name']['#value'];
      $row[] = drupal_render($form['uid'][$key]['keep']);
      $row[] = drupal_render($form['uid'][$key]['grant_view']);
      $row[] = drupal_render($form['uid'][$key]['grant_update']);
      $row[] = drupal_render($form['uid'][$key]['grant_delete']);
      $rows[] = $row;
    }
    $output .= theme('table', $header, $rows);
  }
	
  $output .= drupal_render($form);

  return $output;
}

function nodeaccess_grants_form_submit($form_id, $form_values) {	
  global $user;
  $grants = array();
  $nid = $form_values['nid'];
  $save = array();
  $node->nid = $nid; 

  foreach (array('uid', 'rid') as $type) {
    $realm = 'nodeaccess_' . $type;
    if (is_array($form_values[$type])) {
      $grants = array();
      foreach ($form_values[$type] as $gid => $line) {
        $grant = array('gid' => $gid, 'realm' => $realm, 'grant_view' => $line['grant_view'], 
          'grant_update' => $line['grant_update'], 'grant_delete' => $line['grant_delete']);
        $grants[] = $grant;
        $save[] = $grant;
      }
    }
    node_access_write_grants($node, $grants, $realm);
  }

  // add author grants
  // holy crap same piece of code used 3 times aaaah!
  $author_prefs = variable_get('nodeaccess_authors', array());
  $agrant = $author_prefs[$node->type];
  if (variable_get('nodeaccess-priority', 0)) {
    $priority = 1;
  }
  else {
    $priority = 0;
  }
  if ($agrant['grant_view'] || $agrant['grant_update'] || $agrant['grant_delete']) {
    $grants[] = array(
      'realm' => 'nodeaccess_author',
      'gid' => $node->uid,
      'grant_view' => $agrant['grant_view'],
      'grant_update' => $agrant['grant_update'],
      'grant_delete' => $agrant['grant_delete'],
      'priority' => $priority
    );
    node_access_write_grants($node, $grants, 'nodeaccess_author');
  }
  

      
  // save it to our own table, thanks to the new api....
  _nodeaccess_save_new($nid, $save);

  drupal_set_message(t('Grants saved.'));
}

/**
 * Popupate $edit. Loads all roles, gathers uids from node_access and search,
 * and calculates the grants for the users.
 *
 * This queries the node_access tables, but it doesn't write so hopefully that's ok
 *
 */
function _nodeaccess_populate($nid) {
  $edit = $_POST;
  //dprint_r($edit);
  // delete what is not kept
  if (is_array($edit['uid'])) {
    foreach ($edit['uid'] as $uid => $row) {
      if (!$row['keep']) {
        unset($edit['uid'][$uid]);
      }
    }
  }
  if (!$edit) {
    $edit = array();
    // load all roles
    $result = db_query("SELECT rid, name, na.* FROM {role} LEFT JOIN {node_access} na ON rid=gid AND realm='%s' AND nid=%d ORDER BY name", 'nodeaccess_rid', $nid);
    while ($grant = db_fetch_object($result)) {
      $edit['rid'][$grant->rid] = array('name' => $grant->name, 'grant_view' => $grant->grant_view, 'grant_update' => $grant->grant_update, 'grant_delete' => $grant->grant_delete);
    }
    // load uids from node_access
    $result = db_query("SELECT uid, name FROM {node_access} na LEFT JOIN {users} ON uid=gid WHERE nid=%d AND realm='%s'", $nid, 'nodeaccess_uid');
    while ($account = db_fetch_object($result)) {
      $edit['uid'][$account->uid] = array('name' =>  $account->name, 'keep' => 1);
    }
  }
  // perform search
  if ($edit['keys'] && $edit['old_keys'] != $edit['keys']) {
    $sql = "SELECT uid, name FROM {users} WHERE name LIKE '%%%s%%'";
    $params = array(preg_replace('!\*+!', '%', $edit['keys']));
    if (is_array($edit['uid'])) {
      $sql .= ' AND uid NOT IN (%s)';
      $params[] = implode(',', array_keys($edit['uid']));
    }
    $result = db_query($sql, $params);
    while ($account = db_fetch_object($result)) {
      $edit['uid'][$account->uid] = array('name' =>  $account->name);
    }
  }
  // calculate node grants for users
  if (is_array($edit['uid'])) {
    foreach (array_keys($edit['uid']) as $uid) {
      if (!isset($edit['uid'][$uid]['grant_view'])) {
        foreach (array('grant_view', 'grant_update', 'grant_delete') as $grant_type) {
          $edit['uid'][$uid][$grant_type] = db_num_rows(db_query_range("SELECT * FROM {node_access} na LEFT JOIN {users_roles} r ON na.gid=r.rid WHERE nid=%d AND realm='%s' AND uid=%d AND %s=1", $nid, 'nodeaccess_rid', $uid, $grant_type, 0, 1)) || db_num_rows(db_query_range("SELECT * FROM {node_access} na WHERE nid=%d AND realm='%s' AND gid=%d AND %s=1", $nid, 'nodeaccess_uid', $uid, $grant_type, 0, 1));
        }
      }
    }
  }

  return $edit;
}

function _nodeaccess_save_new($nid, $grants) {
  db_query("DELETE FROM {nodeaccess} WHERE nid=%d", $nid);
  foreach ($grants as $grant) {
    db_query("INSERT INTO {nodeaccess} (nid, gid, realm, grant_view, grant_update, grant_delete) VALUES (%d, %d, '%s', %d, %d, %d)",
      $nid, $grant['gid'], $grant['realm'], $grant['grant_view'], $grant['grant_update'], $grant['grant_delete']);
  }
} 


function nodeaccess_node_grants($user, $op) {
  global $user;

  $roles = is_array($user->roles) ? array_keys($user->roles) : array(-1);
  return array('nodeaccess_rid' => $roles, 'nodeaccess_uid' => array($user->uid), 'nodeaccess_author' => array($user->uid));
}

function nodeaccess_nodeapi(&$node, $op) {
  switch ($op) {
  case 'delete':
    db_query('DELETE FROM {nodeaccess} WHERE nid=%d', $node->nid);
    break;
  }
}

function nodeaccess_admin() {
  // define our settings form
  // need to set defaults from variable_get
  return drupal_get_form('nodeaccess_admin_form');
}

function nodeaccess_admin_form() {
  $show = variable_get('nodeaccess-types', array());
  $roles = user_roles();
  $useroles = variable_get('nodeaccess-roles', array());

  $form['priority'] = array('#type' => 'checkbox',
                            '#title' => t('Give node grants priority'),
                            '#default_value' => variable_get('nodeaccess-priority', 0),
                            '#description' => t('If you are only using this access control module, you can safely ignore this. If you are using multiple access control modules, and you want the grants given on individual nodes to override any grants given by other modules, you should check this box.'));

  $form['role'] =  array('#type' => 'fieldset', '#collapsible' => TRUE, '#collapsed' => TRUE, '#title' => t('Allowed Roles'), '#tree' => TRUE, '#description' => t('The selected roles will be listed on individual node grants. If you wish for certain roles to be hidden from users on the node grants tab, make sure they are not selected here'));
  foreach ($roles as $id => $role) {
    $form['role'][$id] = array('#type' => 'checkbox', '#title' => $role, '#default_value' => $useroles[$id]);
  }


  foreach (node_get_types() as $type => $name) {
    $form['nodeaccess'][$type] = array('#type' => 'fieldset',
                                       '#collapsible' => TRUE,
                                       '#collapsed' => TRUE,
                                       '#title' => $name->name,
                                       '#tree' => TRUE,
                                       '#theme' => 'nodeaccess_admin_fieldset');

    $form['nodeaccess'][$type]['show'] = array('#type' => 'checkbox',
                                               '#title' => t('Show grant tab for this node type'),
                                               '#default_value' => $show[$type]);

    // preference for author settings
    $author_prefs = variable_get('nodeaccess_authors', array());
    $form['nodeaccess'][$type]['author']['grant_view'] = array('#type' => 'checkbox', '#default_value' => $author_prefs[$type]['grant_view']);
    $form['nodeaccess'][$type]['author']['grant_update'] = array('#type' => 'checkbox', '#default_value' => $author_prefs[$type]['grant_update']);
    $form['nodeaccess'][$type]['author']['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $author_prefs[$type]['grant_delete']);
      
    $perms = variable_get('nodeaccess_' . $type, array());
    foreach ($perms as $perm) {
      $opts[$perm['gid']] = $perm;
    }
    // go through our roles
    foreach (user_roles() as $id => $role) {
      $form['nodeaccess'][$type]['roles'][$id]['name'] = array('#value' => $role);
      $form['nodeaccess'][$type]['roles'][$id]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_view']);
      $form['nodeaccess'][$type]['roles'][$id]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_update']);
      $form['nodeaccess'][$type]['roles'][$id]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $opts[$id]['grant_delete']);
    }
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Grants'));
  return $form;
}

function theme_nodeaccess_admin_fieldset($form) {
  $output = drupal_render($form['show']);
  $roles = element_children($form['roles']);
  $header = array(t('Role'), t('View'), t('Edit'), t('Delete'));
  foreach ($roles as $role) {
    $row = array();
    $row[] = drupal_render($form['roles'][$role]['name']);
    $row[] = drupal_render($form['roles'][$role]['grant_view']);
    $row[] = drupal_render($form['roles'][$role]['grant_update']);
    $row[] = drupal_render($form['roles'][$role]['grant_delete']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);

  $header = array(t('Author Settings'), t('View'), t('Edit'), t('Delete'));
  $row = array();
  $row[] = t('Node author');
  $row[] = drupal_render($form['author']['grant_view']);
  $row[] = drupal_render($form['author']['grant_update']);
  $row[] = drupal_render($form['author']['grant_delete']);

  $output .= theme('table', $header, array($row));
  $output .= '<small>' . t('The settings selected for the node author will define what permissions the node author has. This cannot be changed on individual node grants') . '</small>';
  return $output;
}

function nodeaccess_admin_form_submit($form_id, $form_values) {

  variable_set('nodeaccess-priority', $form_values['priority']);

  foreach ($form_values['role'] as $id => $val) {
    $pref[$id] = $val;
  }

  variable_set('nodeaccess-roles', $pref);

  $author_prefs = array();
  
  foreach (node_get_types() as $type => $name) {
    $grants = array();
    // update grants
    foreach ($form_values[$type]['roles'] as $role => $val) {
      $grants[] = array('gid' => $role, 'realm' => 'nodeaccess_rid', 'grant_view' => $val['grant_view'], 'grant_update' => $val['grant_update'], 'grant_delete' => $val['grant_delete']);
    }
    variable_set('nodeaccess_' . $type, $grants);
    if ($form_values[$type]['show']) {	
      $showing[$type] = 1;
    } 
    else {
      $showing[$type] = 0;
    }

    $author_prefs[$type] = $form_values[$type]['author'];
  }

  // set author prefs

  variable_set('nodeaccess_authors', $author_prefs);

  variable_set('nodeaccess-types', $showing);
  node_access_rebuild();
  drupal_set_message(t('Grants Saved'), 'status');
}

function nodeaccess_node_access_records($node) {
  if (nodeaccess_disabling()) {
    return;
  }

  // need to figure out if we're going for the defaults, or if this node has a preference
  $default = variable_get('nodeaccess_' . $node->type, array());
 
  if (variable_get('nodeaccess-priority', 0)) {
    $priority = 1;
  }
  else {
    $priority = 0;
  } 
  $result = db_query("SELECT nid, gid, realm, grant_view, grant_update, grant_delete FROM {nodeaccess} where nid = %d", $node->nid);
  if (db_num_rows($result) < 1) {
    $grants = $default;
    foreach ($grants as $id => $grant) {
      $grants[$id]['priority'] = $priority;
    }
  } 
  else {
    // this node has a custom access set apart from the defaults, so return that
    $grants = array();
    while ($row = db_fetch_object($result)) {
      $grants[] = array(
        'realm' => $row->realm,
        'gid' => $row->gid,
        'grant_view' => $row->grant_view,
        'grant_update' => $row->grant_update,
        'grant_delete' => $row->grant_delete,
        'priority' => $priority);
    }
  }

  // add author grants
  $author_prefs = variable_get('nodeaccess_authors', array());
  $agrant = $author_prefs[$node->type];
  if ($agrant['grant_view'] || $agrant['grant_update'] || $agrant['grant_delete']) {
    $grants[] = array(
      'realm' => 'nodeaccess_author',
      'gid' => $node->uid,
      'grant_view' => $agrant['grant_view'],
      'grant_update' => $agrant['grant_update'],
      'grant_delete' => $agrant['grant_delete'],
      'priority' => $priority 
    );
  }
  return $grants;
}

function nodeaccess_enable() {
  node_access_rebuild();
}

function nodeaccess_disable() {
  nodeaccess_disabling(TRUE);
  node_access_rebuild();
}

function nodeaccess_disabling($set = NULL) {
  static $disabling = false;
  if ($set !== NULL) {
    $disabling = $set;
  }
  return $disabling;
} 

function nodeaccess_node_type($op, $info) {
  switch($op) {
    case 'delete':
      // node type is being deleted, get rid of prefs
      variable_del('nodeaccess_' . $info->type);
      break;
    case 'update':
      // node type has changed
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        $setting = variable_get('nodeaccess_'. $info->old_type, array());
        variable_del('nodeaccess_'. $info->old_type);
        variable_set('nodeaccess_'. $info->type, $setting);
      }
      break;
    case 'insert':
      // new node type, default to all viewing
      $grants[] = array('gid' => 1, 'realm' => 'nodeaccess_rid', 'grant_view' => 1, 
                  'grant_update' => 0, 'grant_delete' => 0);
      $grants[] = array('gid' => 2, 'realm' => 'nodeaccess_rid', 'grant_view' => 1,                                        'grant_update' => 0, 'grant_delete' => 0);
      $author_prefs = variable_get('nodeaccess_authors', array());
      $author_prefs[$info->type] = array('grant_view' => 1, 'grant_update' => 1, 'grant_delete' => 1);
      variable_set('nodeaccess_' . $info->type, $grants); 
      node_access_rebuild();
      break;
  }
}

?>
